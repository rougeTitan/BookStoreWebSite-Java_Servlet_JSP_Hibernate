package com.bookstore.entity;


import javax.persistence.*;
import java.util.*;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Book generated by hbm2java
 */
@Entity
@Table(name = "book", catalog = "bookstoredb", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQueries({
		@NamedQuery(name = "Book.findAll", query = "SELECT b FROM Book b"),
		@NamedQuery(name = "Book.findByTitle", query = "SELECT b FROM Book b WHERE b.title = :title"),
		@NamedQuery(name = "Book.countAll", query = "SELECT COUNT(*) FROM Book b"),
		@NamedQuery(name = "Book.countByCategory", query = "SELECT COUNT(b) FROM Book b "
				+ "WHERE b.category.categoryId = :catId"),
		@NamedQuery(name = "Book.findByCategory", query = "SELECT b FROM Book b JOIN "
				+ "Category c ON b.category.categoryId = c.categoryId AND c.categoryId = :catId"),
		@NamedQuery(name = "Book.listNew", query = "SELECT b FROM Book b ORDER BY b.publishDate DESC"),
		@NamedQuery(name = "Book.search", query = "SELECT b FROM Book b WHERE b.title Like '%' || :keyword || '%'"
				+ "OR b.author LIKE '%' || :keyword || '%'"
				+ "OR b.description LIKE '%' || :keyword || '%'")
})
public class Book implements java.io.Serializable {

	private int bookId;
	private Category category;
	private String title;
	private String author;
	private String description;
	private String isbn;
	private byte[] image;
	private String base64Image;
	private float price;
	private Date publishDate;
	private Date lastUpdateTime;
	private Set <Review> reviews = new HashSet<Review>(0);
	private Set <OrderDetail>orderDetails = new HashSet<OrderDetail>(0);

	public Book(int bookId, Category category, String title, String author, String description, String isbn,
			byte[] image, float price, Date publishDate, Date lastUpdateTime) {
		this.bookId = bookId;
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;
		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
	}

	public Book(int bookId, Category category, String title, String author, String description, String isbn,
			byte[] image, float price, Date publishDate, Date lastUpdateTime, Set reviews, Set orderDetails) {
		this.bookId = bookId;
		this.category = category;
		this.title = title;
		this.author = author;
		this.description = description;
		this.isbn = isbn;
		this.image = image;

		this.price = price;
		this.publishDate = publishDate;
		this.lastUpdateTime = lastUpdateTime;
		this.reviews = reviews;
		this.orderDetails = orderDetails;
	}

	public Book(Integer bookId) {
		this.bookId = bookId;
	}

	public Book() {
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "book_id", unique = true, nullable = false)
	public int getBookId() {
		return this.bookId;
	}

	public void setBookId(int bookId) {
		this.bookId = bookId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "title", unique = true, nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "author", nullable = false, length = 64)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "description", nullable = false, length = 16777215)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isbn", nullable = false, length = 15)
	public String getIsbn() {
		return this.isbn;
	}

	public void setIsbn(String isbn) {
		this.isbn = isbn;
	}

	@Column(name = "image", nullable = false)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "price", nullable = false, precision = 12, scale = 0)
	public float getPrice() {
		return this.price;
	}

	public void setPrice(float price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "publish_date", nullable = false, length = 10)
	public Date getPublishDate() {
		return this.publishDate;
	}

	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_update_time", nullable = false, length = 19)
	public Date getLastUpdateTime() {
		return this.lastUpdateTime;
	}

	public void setLastUpdateTime(Date lastUpdateTime) {
		this.lastUpdateTime = lastUpdateTime;
	}

	@OneToMany(fetch = FetchType.EAGER, targetEntity = Review.class, mappedBy = "book")
	public Set getReviews() {

		TreeSet<Review> sortedReviews = new TreeSet<Review>(new Comparator<Review>() {
			@Override
			public int compare(Review review1, Review review2) {
				return review2.getReviewTime().compareTo(review1.getReviewTime());
			}
		});

		sortedReviews.addAll(reviews);
		return this.reviews;
	}

	public void setReviews(Set reviews) {
		this.reviews = reviews;
	}

	@OneToMany(fetch = FetchType.LAZY, targetEntity = OrderDetail.class , mappedBy = "book")
	public Set getOrderDetails() {
		return this.orderDetails;
	}

	public void setOrderDetails(Set orderDetails) {
		this.orderDetails = orderDetails;
	}

	//transient means these getter and setter for baseImage64 is not
	//associated with any database fields
	@Transient
	public String getBase64Image() {
		this.base64Image = Base64.getEncoder().encodeToString(this.image);
		return base64Image;
	}
	
	@Transient
	public void setBase64Image(String base64) {
	this.base64Image = base64;
	}


	@Transient
	public float getAverageRating() {
		float averageRating = 0.0f;
		float sum = 0.0f;
		if (reviews.isEmpty()) {
			return 0.0f;
		}
		for (Review review : reviews) {
			sum += review.getRating();
		}
		averageRating = sum / reviews.size();
		return averageRating;
	}

	@Transient
	public String getAverageRatingString(float averageRating) {
		String result = "";
		int numberOfStarsOn = (int) averageRating;
		for (int i = 1; i <= numberOfStarsOn; i++) {
			result += "on,";
		}
		int next = numberOfStarsOn + 1;

		if (averageRating > numberOfStarsOn) {
			result += "half,";
			next++;
		}

		for (int j = next; j <= 5; j++) {
			result += "off,";
		}
		return result.substring(0, result.length() - 1);

	}
	
	@Transient
	public String getRatingStars () {
		float averageRating = getAverageRating();
		return getAverageRatingString(averageRating);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + bookId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Book other = (Book) obj;
		if (bookId != other.bookId)
			return false;
		return true;
	}

}
